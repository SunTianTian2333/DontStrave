[00:00:00]: 
System Memory:
	Memory Load: 41%
	Available Physical Memory: 9582m/16304m
	Available Page File: 7808m/17328m
	Available Virtual Memory: 134213486m/134217727m
	Available Extended Virtual Memory: 0m
[00:00:00]: 
Process Memory:
	Peak Working Set Size: 30m
	Working Set Size: 30m
	Quota Peak Page Pool Usage: 213k
	Quota Page Pool Usage: 209k
	Quota Peak Non Paged Pool Usage:14k
	Quota Non Paged Pool Usage: 13k
	Page File Usage: 5m
	Peak Page File Usage: 5m
[00:00:00]: PersistRootStorage is now APP:Klei//DoNotStarveTogether/375444649/Cluster_2/Master/ 
[00:00:00]: Starting Up
[00:00:00]: Version: 682257
[00:00:00]: Current time: Sun Aug 17 14:04:56 2025

[00:00:00]: Don't Starve Together: 682257 WIN32
[00:00:00]: Build Date: 3475
[00:00:00]: Mode: 64-bit
[00:00:00]: Parsing command line
[00:00:00]: Command Line Arguments: -monitor_parent_process 7552 -persistent_storage_root APP:Klei/ -conf_dir DoNotStarveTogether -cluster Cluster_2 -fo -ownernetid 76561198335710377 -ownerdir 375444649 -clouddir 375444649 -backup_log_count 25 -backup_log_period 0 -ugc_directory D:\\SteamLibrary\\steamapps\\workshop -shard Master -secondary_log_prefix master -sigprefix DST_Master -token ************************************************************************************ 
[00:00:00]: Initializing distribution platform
[00:00:00]: Initializing Minidump handler
[00:00:00]: ....Done
[00:00:00]: ....Done
[00:00:00]: Fixing DPI
[00:00:00]: ...Done
[00:00:00]: THREAD - started 'GAClient' (20320)
[00:00:00]: CurlRequestManager::ClientThread::Main()
[00:00:00]: ProfileIndex:2.86
[00:00:00]: Mounting file system databundles/klump.zip successful.
[00:00:00]: Mounting file system databundles/shaders.zip successful.
[00:00:00]: Mounting file system databundles/fonts.zip successful.
[00:00:00]: Mounting file system databundles/anim_dynamic.zip successful.
[00:00:00]: Mounting file system databundles/bigportraits.zip successful.
[00:00:00]: Mounting file system databundles/images.zip successful.
[00:00:00]: Mounting file system databundles/scripts.zip successful.
[00:00:00]: [Steam] SteamGameServer_Init(10999, 27016)
[00:00:01]: [Steam] SteamGameServer_Init success
[00:00:01]: [Connect] PendingConnection::Reset(true)
[00:00:01]: Platform: 1
[00:00:01]: Network tick rate: U=15(2), D=0
[00:00:01]: Network tick rate: U=15(2), D=0
[00:00:01]: Authorized application D:\SteamLibrary\steamapps\common\Don't Starve Together\bin64\dontstarve_dedicated_server_nullrenderer_x64.exe is enabled in the firewall.
[00:00:01]: WindowsFirewall - Application already authorized
[00:00:01]: THREAD - started 'StreamInput' (13800)
[00:00:01]: OnLoadPermissionList: APP:Klei//DoNotStarveTogether/375444649/client_save/blocklist.txt (Failure)
[00:00:01]: OnLoadPermissionList: APP:Klei//DoNotStarveTogether/375444649/client_save/adminlist.txt (Failure)
[00:00:01]: OnLoadUserIdList: APP:Klei//DoNotStarveTogether/375444649/client_save/whitelist.txt (Failure)
[00:00:01]: Offline user ID: OU_76561198335710377
[00:00:01]: HardwareStats:
  OS                        
    name                      Microsoft Windows 10 专业版
    version                   10.0.19045
    platformSpecific          SP 0.0
    architecture              64 位
  CPU                       
    clockSpeed                2400
    name                      Intel(R) Core(TM) i5-9300H CPU @ 2.40GHz
    manufacturer              GenuineIntel
    numCores                  4
    features                  SSE,SSE2,SSE3,SSSE3,SSE41,SSE42,AVX
  RAM                       
    megsOfRam                 16384
  GPU                       
    megsOfRam                 4095
    videoModeDescription      1920 x 1080 x 4294967296 种颜色
    name                      NVIDIA GeForce GTX 1650
    driverVersion             32.0.15.6081
    driverDate                20240730000000.000000-000
    refreshRate               60

[00:00:01]: cGame::InitializeOnMainThread
[00:00:01]: Renderer initialize: Okay
[00:00:01]: AnimManager initialize: Okay
[00:00:01]: Buffers initialize: Okay
[00:00:01]: cDontStarveGame::DoGameSpecificInitialize()
[00:00:01]: GameSpecific initialize: Okay
[00:00:01]: cGame::StartPlaying
[00:00:01]: AppVersion::GetArchitecture() x64
[00:00:01]: LOADING LUA
[00:00:01]: DoLuaFile scripts/main.lua
[00:00:01]: DoLuaFile loading buffer scripts/main.lua
[00:00:01]: Translator:LoadPOFile - loading file: scripts/languages/chinese_s.po	
[00:00:04]:   taskgrouplist:	default	联机版	
[00:00:04]:   taskgrouplist:	classic	经典	
[00:00:04]:   taskgrouplist:	cave_default	地下	
[00:00:04]:   taskgrouplist:	lavaarena_taskset	熔炉	
[00:00:04]:   taskgrouplist:	quagmire_taskset	暴食	
[00:00:04]: Running main.lua
	
[00:00:04]: loaded modindex	
[00:00:04]: ModIndex: Beginning normal load sequence for dedicated server.
	
[00:00:04]: SUCCESS: Loaded modoverrides.lua	
[00:00:04]: Event data unavailable: lavaarena_event_server/lavaarena_achievement_quest_defs
[00:00:06]: LOADING LUA SUCCESS
[00:00:06]: PlayerDeaths could not load morgue	
[00:00:06]: PlayerHistory could not load player_history	
[00:00:06]: ServerPreferences could not load server_preferences	
[00:00:06]: ConsoleScreenSettings could not load consolescreen	
[00:00:06]: bloom_enabled	true	
[00:00:06]: OnFilesLoaded()	
[00:00:06]: OnUpdatePurchaseStateComplete	
[00:00:06]: Klump load on boot started.	
[00:00:06]: Klump files loaded: 	0	
[00:00:08]: 	Load FE	
[00:00:09]: 	Load FE: done	
[00:00:09]: THREAD - started 'FilesExistAsyncThread' (12568)
[00:00:09]: FilesExistAsyncThread started (26681 files)...
[00:00:09]: Check for write access: TRUE
[00:00:09]: Check for read access: TRUE
[00:00:09]: Available disk space for save files: 47347 MB
[00:00:09]: ModIndex: Load sequence finished successfully.	
[00:00:09]: Reset() returning
[00:00:09]: [IPC] Signal 'DST_Master_Kill' opened  #0000000000000740
[00:00:09]: [IPC] Registering handler for signal #0000000000000740
[00:00:09]: [IPC] Handle #0000000000000740 added to the Eventhandles
[00:00:09]: [IPC] Signal 'DST_Master_ShutdownNoSave' opened  #0000000000000794
[00:00:09]: [IPC] Registering handler for signal #0000000000000794
[00:00:09]: [IPC] Handle #0000000000000794 added to the Eventhandles
[00:00:09]: [IPC] Signal 'DST_Master_Starting' opened  #000000000000074C
[00:00:09]: [IPC] Sending signal... #000000000000074C
[00:00:10]: [200] Account Communication Success (6)
[00:00:10]: Cached userid (null) saved to APP:Klei//DoNotStarveTogether/375444649/Cluster_2/Master/save/cached_userid
[00:00:10]: Received (KU_F4GEm1KF) from TokenPurpose
[00:00:10]: Starting Dedicated Server Game	
[00:00:10]: Network tick rate: U=15(2), D=0
[00:00:10]: About to start a server with the following settings:
[00:00:10]:   Dedicated: true
[00:00:10]:   Online: true
[00:00:10]:   Passworded: true
[00:00:10]:   ServerPort: 10999
[00:00:10]:   SteamAuthPort: 8766
[00:00:10]:   SteamMasterServerPort: 27016
[00:00:10]:   ClanID: false
[00:00:10]:   ClanOnly: false
[00:00:10]:   ClanAdmin: false
[00:00:10]:   LanOnly: false
[00:00:10]:   FriendsOnly: true
[00:00:10]:   EnableAutosaver: true
[00:00:10]:   EncodeUserPath: true
[00:00:10]:   PVP: false
[00:00:10]:   MaxPlayers: 3
[00:00:10]:   GameMode: survival
[00:00:10]:   OverridenDNS: 
[00:00:10]:   PauseWhenEmpty: true
[00:00:10]:   IdleTimeout: 1800s
[00:00:10]:   VoteEnabled: false
[00:00:10]:   InternetBroadcasting: true
[00:00:10]: [Warning] Could not confirm port 10999 is open in the firewall. 
[00:00:10]: Online Server Started on port: 10999
[00:00:10]: SUCCESS: Loaded modoverrides.lua	
[00:00:10]: Found a level data override file with these contents:	
[00:00:10]: 	K: 	desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:10]: 	K: 	hideminimap	 V: 	false	
[00:00:10]: 	K: 	id	 V: 	ENDLESS	
[00:00:10]: 	K: 	location	 V: 	forest	
[00:00:10]: 	K: 	max_playlist_position	 V: 	999	
[00:00:10]: 	K: 	min_playlist_position	 V: 	0	
[00:00:10]: 	K: 	name	 V: 	无尽	
[00:00:10]: 	K: 	numrandom_set_pieces	 V: 	4	
[00:00:10]: 	K: 	override_level_string	 V: 	false	
[00:00:10]: 	K: 	overrides	 V: 	table: 00000000170B84D0	
[00:00:10]: 		K: 	alternatehunt	 V: 	default	
[00:00:10]: 		K: 	angrybees	 V: 	default	
[00:00:10]: 		K: 	antliontribute	 V: 	default	
[00:00:10]: 		K: 	autumn	 V: 	default	
[00:00:10]: 		K: 	balatro	 V: 	default	
[00:00:10]: 		K: 	bananabush_portalrate	 V: 	default	
[00:00:10]: 		K: 	basicresource_regrowth	 V: 	always	
[00:00:10]: 		K: 	bats_setting	 V: 	default	
[00:00:10]: 		K: 	bearger	 V: 	default	
[00:00:10]: 		K: 	beefalo	 V: 	default	
[00:00:10]: 		K: 	beefaloheat	 V: 	default	
[00:00:10]: 		K: 	beequeen	 V: 	default	
[00:00:10]: 		K: 	bees	 V: 	default	
[00:00:10]: 		K: 	bees_setting	 V: 	default	
[00:00:10]: 		K: 	berrybush	 V: 	default	
[00:00:10]: 		K: 	birds	 V: 	default	
[00:00:10]: 		K: 	boons	 V: 	default	
[00:00:10]: 		K: 	branching	 V: 	default	
[00:00:10]: 		K: 	brightmarecreatures	 V: 	default	
[00:00:10]: 		K: 	bunnymen_setting	 V: 	default	
[00:00:10]: 		K: 	butterfly	 V: 	default	
[00:00:10]: 		K: 	buzzard	 V: 	default	
[00:00:10]: 		K: 	cactus	 V: 	default	
[00:00:10]: 		K: 	cactus_regrowth	 V: 	default	
[00:00:10]: 		K: 	carrot	 V: 	default	
[00:00:10]: 		K: 	carrots_regrowth	 V: 	default	
[00:00:10]: 		K: 	catcoon	 V: 	default	
[00:00:10]: 		K: 	catcoons	 V: 	default	
[00:00:10]: 		K: 	chess	 V: 	default	
[00:00:10]: 		K: 	cookiecutters	 V: 	default	
[00:00:10]: 		K: 	crabking	 V: 	default	
[00:00:10]: 		K: 	crow_carnival	 V: 	default	
[00:00:10]: 		K: 	darkness	 V: 	default	
[00:00:10]: 		K: 	day	 V: 	default	
[00:00:10]: 		K: 	daywalker2	 V: 	default	
[00:00:10]: 		K: 	deciduousmonster	 V: 	default	
[00:00:10]: 		K: 	deciduoustree_regrowth	 V: 	default	
[00:00:10]: 		K: 	deerclops	 V: 	default	
[00:00:10]: 		K: 	dragonfly	 V: 	default	
[00:00:10]: 		K: 	dropeverythingondespawn	 V: 	default	
[00:00:10]: 		K: 	evergreen_regrowth	 V: 	default	
[00:00:10]: 		K: 	extrastartingitems	 V: 	default	
[00:00:10]: 		K: 	eyeofterror	 V: 	default	
[00:00:10]: 		K: 	fishschools	 V: 	default	
[00:00:10]: 		K: 	flint	 V: 	default	
[00:00:10]: 		K: 	flowers	 V: 	default	
[00:00:10]: 		K: 	flowers_regrowth	 V: 	default	
[00:00:10]: 		K: 	frograin	 V: 	default	
[00:00:10]: 		K: 	frogs	 V: 	default	
[00:00:10]: 		K: 	fruitfly	 V: 	default	
[00:00:10]: 		K: 	ghostenabled	 V: 	always	
[00:00:10]: 		K: 	ghostsanitydrain	 V: 	none	
[00:00:10]: 		K: 	gnarwail	 V: 	default	
[00:00:10]: 		K: 	goosemoose	 V: 	default	
[00:00:10]: 		K: 	grass	 V: 	default	
[00:00:10]: 		K: 	grassgekkos	 V: 	default	
[00:00:10]: 		K: 	hallowed_nights	 V: 	default	
[00:00:10]: 		K: 	has_ocean	 V: 	true	
[00:00:10]: 		K: 	healthpenalty	 V: 	always	
[00:00:10]: 		K: 	hound_mounds	 V: 	default	
[00:00:10]: 		K: 	houndmound	 V: 	default	
[00:00:10]: 		K: 	hounds	 V: 	default	
[00:00:10]: 		K: 	hunger	 V: 	default	
[00:00:10]: 		K: 	hunt	 V: 	default	
[00:00:10]: 		K: 	junkyard	 V: 	default	
[00:00:10]: 		K: 	keep_disconnected_tiles	 V: 	true	
[00:00:10]: 		K: 	klaus	 V: 	default	
[00:00:10]: 		K: 	krampus	 V: 	default	
[00:00:10]: 		K: 	layout_mode	 V: 	LinkNodesByKeys	
[00:00:10]: 		K: 	lessdamagetaken	 V: 	none	
[00:00:10]: 		K: 	liefs	 V: 	default	
[00:00:10]: 		K: 	lightcrab_portalrate	 V: 	default	
[00:00:10]: 		K: 	lightning	 V: 	default	
[00:00:10]: 		K: 	lightninggoat	 V: 	default	
[00:00:10]: 		K: 	loop	 V: 	default	
[00:00:10]: 		K: 	lunarhail_frequency	 V: 	default	
[00:00:10]: 		K: 	lureplants	 V: 	default	
[00:00:10]: 		K: 	malbatross	 V: 	default	
[00:00:10]: 		K: 	marshbush	 V: 	default	
[00:00:10]: 		K: 	merm	 V: 	default	
[00:00:10]: 		K: 	merms	 V: 	default	
[00:00:10]: 		K: 	meteorshowers	 V: 	default	
[00:00:10]: 		K: 	meteorspawner	 V: 	default	
[00:00:10]: 		K: 	moles	 V: 	default	
[00:00:10]: 		K: 	moles_setting	 V: 	default	
[00:00:10]: 		K: 	monkeytail_portalrate	 V: 	default	
[00:00:10]: 		K: 	moon_berrybush	 V: 	default	
[00:00:10]: 		K: 	moon_bullkelp	 V: 	default	
[00:00:10]: 		K: 	moon_carrot	 V: 	default	
[00:00:10]: 		K: 	moon_fissure	 V: 	default	
[00:00:10]: 		K: 	moon_fruitdragon	 V: 	default	
[00:00:10]: 		K: 	moon_hotspring	 V: 	default	
[00:00:10]: 		K: 	moon_rock	 V: 	default	
[00:00:10]: 		K: 	moon_sapling	 V: 	default	
[00:00:10]: 		K: 	moon_spider	 V: 	default	
[00:00:10]: 		K: 	moon_spiders	 V: 	default	
[00:00:10]: 		K: 	moon_starfish	 V: 	default	
[00:00:10]: 		K: 	moon_tree	 V: 	default	
[00:00:10]: 		K: 	moon_tree_regrowth	 V: 	default	
[00:00:10]: 		K: 	mosquitos	 V: 	default	
[00:00:10]: 		K: 	mushroom	 V: 	default	
[00:00:10]: 		K: 	mutated_hounds	 V: 	default	
[00:00:10]: 		K: 	no_joining_islands	 V: 	true	
[00:00:10]: 		K: 	no_wormholes_to_disconnected_tiles	 V: 	true	
[00:00:10]: 		K: 	ocean_bullkelp	 V: 	default	
[00:00:10]: 		K: 	ocean_otterdens	 V: 	default	
[00:00:10]: 		K: 	ocean_seastack	 V: 	ocean_default	
[00:00:10]: 		K: 	ocean_shoal	 V: 	default	
[00:00:10]: 		K: 	ocean_waterplant	 V: 	ocean_default	
[00:00:10]: 		K: 	ocean_wobsterden	 V: 	default	
[00:00:10]: 		K: 	otters_setting	 V: 	default	
[00:00:10]: 		K: 	palmcone_seed_portalrate	 V: 	default	
[00:00:10]: 		K: 	palmconetree	 V: 	default	
[00:00:10]: 		K: 	palmconetree_regrowth	 V: 	default	
[00:00:10]: 		K: 	penguins	 V: 	default	
[00:00:10]: 		K: 	penguins_moon	 V: 	default	
[00:00:10]: 		K: 	perd	 V: 	default	
[00:00:10]: 		K: 	petrification	 V: 	default	
[00:00:10]: 		K: 	pigs	 V: 	default	
[00:00:10]: 		K: 	pigs_setting	 V: 	default	
[00:00:10]: 		K: 	pirateraids	 V: 	default	
[00:00:10]: 		K: 	ponds	 V: 	default	
[00:00:10]: 		K: 	portal_spawnrate	 V: 	default	
[00:00:10]: 		K: 	portalresurection	 V: 	always	
[00:00:10]: 		K: 	powder_monkey_portalrate	 V: 	default	
[00:00:10]: 		K: 	prefabswaps_start	 V: 	default	
[00:00:10]: 		K: 	rabbits	 V: 	default	
[00:00:10]: 		K: 	rabbits_setting	 V: 	default	
[00:00:10]: 		K: 	reeds	 V: 	default	
[00:00:10]: 		K: 	reeds_regrowth	 V: 	default	
[00:00:10]: 		K: 	regrowth	 V: 	default	
[00:00:10]: 		K: 	resettime	 V: 	none	
[00:00:10]: 		K: 	rifts_enabled	 V: 	default	
[00:00:10]: 		K: 	rifts_frequency	 V: 	default	
[00:00:10]: 		K: 	roads	 V: 	default	
[00:00:10]: 		K: 	rock	 V: 	default	
[00:00:10]: 		K: 	rock_ice	 V: 	default	
[00:00:10]: 		K: 	saltstack_regrowth	 V: 	default	
[00:00:10]: 		K: 	sapling	 V: 	default	
[00:00:10]: 		K: 	season_start	 V: 	default	
[00:00:10]: 		K: 	seasonalstartingitems	 V: 	default	
[00:00:10]: 		K: 	shadowcreatures	 V: 	default	
[00:00:10]: 		K: 	sharkboi	 V: 	default	
[00:00:10]: 		K: 	sharks	 V: 	default	
[00:00:10]: 		K: 	spawnmode	 V: 	fixed	
[00:00:10]: 		K: 	spawnprotection	 V: 	default	
[00:00:10]: 		K: 	specialevent	 V: 	default	
[00:00:10]: 		K: 	spider_warriors	 V: 	default	
[00:00:10]: 		K: 	spiderqueen	 V: 	default	
[00:00:10]: 		K: 	spiders	 V: 	default	
[00:00:10]: 		K: 	spiders_setting	 V: 	default	
[00:00:10]: 		K: 	spring	 V: 	default	
[00:00:10]: 		K: 	squid	 V: 	default	
[00:00:10]: 		K: 	stageplays	 V: 	default	
[00:00:10]: 		K: 	start_location	 V: 	default	
[00:00:10]: 		K: 	summer	 V: 	default	
[00:00:10]: 		K: 	summerhounds	 V: 	default	
[00:00:10]: 		K: 	tallbirds	 V: 	default	
[00:00:10]: 		K: 	task_set	 V: 	default	
[00:00:10]: 		K: 	temperaturedamage	 V: 	default	
[00:00:10]: 		K: 	tentacles	 V: 	default	
[00:00:10]: 		K: 	terrariumchest	 V: 	default	
[00:00:10]: 		K: 	touchstone	 V: 	default	
[00:00:10]: 		K: 	trees	 V: 	default	
[00:00:10]: 		K: 	tumbleweed	 V: 	default	
[00:00:10]: 		K: 	twiggytrees_regrowth	 V: 	default	
[00:00:10]: 		K: 	walrus	 V: 	default	
[00:00:10]: 		K: 	walrus_setting	 V: 	default	
[00:00:10]: 		K: 	wanderingtrader_enabled	 V: 	always	
[00:00:10]: 		K: 	wasps	 V: 	default	
[00:00:10]: 		K: 	weather	 V: 	default	
[00:00:10]: 		K: 	wildfires	 V: 	default	
[00:00:10]: 		K: 	winter	 V: 	default	
[00:00:10]: 		K: 	winterhounds	 V: 	default	
[00:00:10]: 		K: 	winters_feast	 V: 	default	
[00:00:10]: 		K: 	wobsters	 V: 	default	
[00:00:10]: 		K: 	world_size	 V: 	default	
[00:00:10]: 		K: 	wormhole_prefab	 V: 	wormhole	
[00:00:10]: 		K: 	year_of_the_beefalo	 V: 	default	
[00:00:10]: 		K: 	year_of_the_bunnyman	 V: 	default	
[00:00:10]: 		K: 	year_of_the_carrat	 V: 	default	
[00:00:10]: 		K: 	year_of_the_catcoon	 V: 	default	
[00:00:10]: 		K: 	year_of_the_dragonfly	 V: 	default	
[00:00:10]: 		K: 	year_of_the_gobbler	 V: 	default	
[00:00:10]: 		K: 	year_of_the_pig	 V: 	default	
[00:00:10]: 		K: 	year_of_the_snake	 V: 	default	
[00:00:10]: 		K: 	year_of_the_varg	 V: 	default	
[00:00:10]: 	K: 	playstyle	 V: 	endless	
[00:00:10]: 	K: 	random_set_pieces	 V: 	table: 00000000170B8610	
[00:00:10]: 		K: 	1	 V: 	Sculptures_2	
[00:00:10]: 		K: 	2	 V: 	Sculptures_3	
[00:00:10]: 		K: 	3	 V: 	Sculptures_4	
[00:00:10]: 		K: 	4	 V: 	Sculptures_5	
[00:00:10]: 		K: 	5	 V: 	Chessy_1	
[00:00:10]: 		K: 	6	 V: 	Chessy_2	
[00:00:10]: 		K: 	7	 V: 	Chessy_3	
[00:00:10]: 		K: 	8	 V: 	Chessy_4	
[00:00:10]: 		K: 	9	 V: 	Chessy_5	
[00:00:10]: 		K: 	10	 V: 	Chessy_6	
[00:00:10]: 		K: 	11	 V: 	Maxwell1	
[00:00:10]: 		K: 	12	 V: 	Maxwell2	
[00:00:10]: 		K: 	13	 V: 	Maxwell3	
[00:00:10]: 		K: 	14	 V: 	Maxwell4	
[00:00:10]: 		K: 	15	 V: 	Maxwell6	
[00:00:10]: 		K: 	16	 V: 	Maxwell7	
[00:00:10]: 		K: 	17	 V: 	Warzone_1	
[00:00:10]: 		K: 	18	 V: 	Warzone_2	
[00:00:10]: 		K: 	19	 V: 	Warzone_3	
[00:00:10]: 	K: 	required_prefabs	 V: 	table: 00000000170B8570	
[00:00:10]: 		K: 	1	 V: 	multiplayer_portal	
[00:00:10]: 	K: 	required_setpieces	 V: 	table: 00000000170B8390	
[00:00:10]: 		K: 	1	 V: 	Sculptures_1	
[00:00:10]: 		K: 	2	 V: 	Maxwell5	
[00:00:10]: 	K: 	settings_desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:10]: 	K: 	settings_id	 V: 	ENDLESS	
[00:00:10]: 	K: 	settings_name	 V: 	无尽	
[00:00:10]: 	K: 	substitutes	 V: 	table: 00000000170B8660	
[00:00:10]: 	K: 	version	 V: 	4	
[00:00:10]: 	K: 	worldgen_desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:10]: 	K: 	worldgen_id	 V: 	ENDLESS	
[00:00:10]: 	K: 	worldgen_name	 V: 	无尽	
[00:00:10]: Loaded and applied level data override from ../leveldataoverride.lua	
[00:00:10]: Overwriting savedata with level data file.	
[00:00:10]: Not applying world gen overrides.	
[00:00:10]: Collecting garbage...
[00:00:10]: lua_gc took 0.08 seconds
[00:00:10]: ~ShardLuaProxy()
[00:00:10]: ~cEventLeaderboardProxy()
[00:00:10]: ~ItemServerLuaProxy()
[00:00:10]: ~InventoryLuaProxy()
[00:00:10]: ~NetworkLuaProxy()
[00:00:10]: ~SimLuaProxy()
[00:00:10]: FilesExistAsyncThread aborted.
[00:00:10]: ... FilesExistAsyncThread complete
[00:00:10]: lua_close took 0.13 seconds
[00:00:10]: ReleaseAll
[00:00:10]: ReleaseAll Finished
[00:00:10]: cGame::StartPlaying
[00:00:10]: AppVersion::GetArchitecture() x64
[00:00:10]: LOADING LUA
[00:00:10]: DoLuaFile scripts/main.lua
[00:00:10]: DoLuaFile loading buffer scripts/main.lua
[00:00:10]: Translator:LoadPOFile - loading file: scripts/languages/chinese_s.po	
[00:00:13]:   taskgrouplist:	default	联机版	
[00:00:13]:   taskgrouplist:	classic	经典	
[00:00:13]:   taskgrouplist:	cave_default	地下	
[00:00:13]:   taskgrouplist:	lavaarena_taskset	熔炉	
[00:00:13]:   taskgrouplist:	quagmire_taskset	暴食	
[00:00:13]: Running main.lua
	
[00:00:13]: loaded modindex	
[00:00:13]: ModIndex: Beginning normal load sequence for dedicated server.
	
[00:00:13]: SUCCESS: Loaded modoverrides.lua	
[00:00:14]: Event data unavailable: lavaarena_event_server/lavaarena_achievement_quest_defs
[00:00:14]: LOADING LUA SUCCESS
[00:00:14]: PlayerDeaths could not load morgue	
[00:00:14]: PlayerHistory could not load player_history	
[00:00:14]: ServerPreferences could not load server_preferences	
[00:00:14]: ConsoleScreenSettings could not load consolescreen	
[00:00:14]: bloom_enabled	true	
[00:00:14]: OnFilesLoaded()	
[00:00:14]: OnUpdatePurchaseStateComplete	
[00:00:14]: SUCCESS: Loaded modoverrides.lua	
[00:00:14]: Found a level data override file with these contents:	
[00:00:14]: 	K: 	desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:14]: 	K: 	hideminimap	 V: 	false	
[00:00:14]: 	K: 	id	 V: 	ENDLESS	
[00:00:14]: 	K: 	location	 V: 	forest	
[00:00:14]: 	K: 	max_playlist_position	 V: 	999	
[00:00:14]: 	K: 	min_playlist_position	 V: 	0	
[00:00:14]: 	K: 	name	 V: 	无尽	
[00:00:14]: 	K: 	numrandom_set_pieces	 V: 	4	
[00:00:14]: 	K: 	override_level_string	 V: 	false	
[00:00:14]: 	K: 	overrides	 V: 	table: 0000000019A57B70	
[00:00:14]: 		K: 	alternatehunt	 V: 	default	
[00:00:14]: 		K: 	angrybees	 V: 	default	
[00:00:14]: 		K: 	antliontribute	 V: 	default	
[00:00:14]: 		K: 	autumn	 V: 	default	
[00:00:14]: 		K: 	balatro	 V: 	default	
[00:00:14]: 		K: 	bananabush_portalrate	 V: 	default	
[00:00:14]: 		K: 	basicresource_regrowth	 V: 	always	
[00:00:14]: 		K: 	bats_setting	 V: 	default	
[00:00:14]: 		K: 	bearger	 V: 	default	
[00:00:14]: 		K: 	beefalo	 V: 	default	
[00:00:14]: 		K: 	beefaloheat	 V: 	default	
[00:00:14]: 		K: 	beequeen	 V: 	default	
[00:00:14]: 		K: 	bees	 V: 	default	
[00:00:14]: 		K: 	bees_setting	 V: 	default	
[00:00:14]: 		K: 	berrybush	 V: 	default	
[00:00:14]: 		K: 	birds	 V: 	default	
[00:00:14]: 		K: 	boons	 V: 	default	
[00:00:14]: 		K: 	branching	 V: 	default	
[00:00:14]: 		K: 	brightmarecreatures	 V: 	default	
[00:00:14]: 		K: 	bunnymen_setting	 V: 	default	
[00:00:14]: 		K: 	butterfly	 V: 	default	
[00:00:14]: 		K: 	buzzard	 V: 	default	
[00:00:14]: 		K: 	cactus	 V: 	default	
[00:00:14]: 		K: 	cactus_regrowth	 V: 	default	
[00:00:14]: 		K: 	carrot	 V: 	default	
[00:00:14]: 		K: 	carrots_regrowth	 V: 	default	
[00:00:14]: 		K: 	catcoon	 V: 	default	
[00:00:14]: 		K: 	catcoons	 V: 	default	
[00:00:14]: 		K: 	chess	 V: 	default	
[00:00:14]: 		K: 	cookiecutters	 V: 	default	
[00:00:14]: 		K: 	crabking	 V: 	default	
[00:00:14]: 		K: 	crow_carnival	 V: 	default	
[00:00:14]: 		K: 	darkness	 V: 	default	
[00:00:14]: 		K: 	day	 V: 	default	
[00:00:14]: 		K: 	daywalker2	 V: 	default	
[00:00:14]: 		K: 	deciduousmonster	 V: 	default	
[00:00:14]: 		K: 	deciduoustree_regrowth	 V: 	default	
[00:00:14]: 		K: 	deerclops	 V: 	default	
[00:00:14]: 		K: 	dragonfly	 V: 	default	
[00:00:14]: 		K: 	dropeverythingondespawn	 V: 	default	
[00:00:14]: 		K: 	evergreen_regrowth	 V: 	default	
[00:00:14]: 		K: 	extrastartingitems	 V: 	default	
[00:00:14]: 		K: 	eyeofterror	 V: 	default	
[00:00:14]: 		K: 	fishschools	 V: 	default	
[00:00:14]: 		K: 	flint	 V: 	default	
[00:00:14]: 		K: 	flowers	 V: 	default	
[00:00:14]: 		K: 	flowers_regrowth	 V: 	default	
[00:00:14]: 		K: 	frograin	 V: 	default	
[00:00:14]: 		K: 	frogs	 V: 	default	
[00:00:14]: 		K: 	fruitfly	 V: 	default	
[00:00:14]: 		K: 	ghostenabled	 V: 	always	
[00:00:14]: 		K: 	ghostsanitydrain	 V: 	none	
[00:00:14]: 		K: 	gnarwail	 V: 	default	
[00:00:14]: 		K: 	goosemoose	 V: 	default	
[00:00:14]: 		K: 	grass	 V: 	default	
[00:00:14]: 		K: 	grassgekkos	 V: 	default	
[00:00:14]: 		K: 	hallowed_nights	 V: 	default	
[00:00:14]: 		K: 	has_ocean	 V: 	true	
[00:00:14]: 		K: 	healthpenalty	 V: 	always	
[00:00:14]: 		K: 	hound_mounds	 V: 	default	
[00:00:14]: 		K: 	houndmound	 V: 	default	
[00:00:14]: 		K: 	hounds	 V: 	default	
[00:00:14]: 		K: 	hunger	 V: 	default	
[00:00:14]: 		K: 	hunt	 V: 	default	
[00:00:14]: 		K: 	junkyard	 V: 	default	
[00:00:14]: 		K: 	keep_disconnected_tiles	 V: 	true	
[00:00:14]: 		K: 	klaus	 V: 	default	
[00:00:14]: 		K: 	krampus	 V: 	default	
[00:00:14]: 		K: 	layout_mode	 V: 	LinkNodesByKeys	
[00:00:14]: 		K: 	lessdamagetaken	 V: 	none	
[00:00:14]: 		K: 	liefs	 V: 	default	
[00:00:14]: 		K: 	lightcrab_portalrate	 V: 	default	
[00:00:14]: 		K: 	lightning	 V: 	default	
[00:00:14]: 		K: 	lightninggoat	 V: 	default	
[00:00:14]: 		K: 	loop	 V: 	default	
[00:00:14]: 		K: 	lunarhail_frequency	 V: 	default	
[00:00:14]: 		K: 	lureplants	 V: 	default	
[00:00:14]: 		K: 	malbatross	 V: 	default	
[00:00:14]: 		K: 	marshbush	 V: 	default	
[00:00:14]: 		K: 	merm	 V: 	default	
[00:00:14]: 		K: 	merms	 V: 	default	
[00:00:14]: 		K: 	meteorshowers	 V: 	default	
[00:00:14]: 		K: 	meteorspawner	 V: 	default	
[00:00:14]: 		K: 	moles	 V: 	default	
[00:00:14]: 		K: 	moles_setting	 V: 	default	
[00:00:14]: 		K: 	monkeytail_portalrate	 V: 	default	
[00:00:14]: 		K: 	moon_berrybush	 V: 	default	
[00:00:14]: 		K: 	moon_bullkelp	 V: 	default	
[00:00:14]: 		K: 	moon_carrot	 V: 	default	
[00:00:14]: 		K: 	moon_fissure	 V: 	default	
[00:00:14]: 		K: 	moon_fruitdragon	 V: 	default	
[00:00:14]: 		K: 	moon_hotspring	 V: 	default	
[00:00:14]: 		K: 	moon_rock	 V: 	default	
[00:00:14]: 		K: 	moon_sapling	 V: 	default	
[00:00:14]: 		K: 	moon_spider	 V: 	default	
[00:00:14]: 		K: 	moon_spiders	 V: 	default	
[00:00:14]: 		K: 	moon_starfish	 V: 	default	
[00:00:14]: 		K: 	moon_tree	 V: 	default	
[00:00:14]: 		K: 	moon_tree_regrowth	 V: 	default	
[00:00:14]: 		K: 	mosquitos	 V: 	default	
[00:00:14]: 		K: 	mushroom	 V: 	default	
[00:00:14]: 		K: 	mutated_hounds	 V: 	default	
[00:00:14]: 		K: 	no_joining_islands	 V: 	true	
[00:00:14]: 		K: 	no_wormholes_to_disconnected_tiles	 V: 	true	
[00:00:14]: 		K: 	ocean_bullkelp	 V: 	default	
[00:00:14]: 		K: 	ocean_otterdens	 V: 	default	
[00:00:14]: 		K: 	ocean_seastack	 V: 	ocean_default	
[00:00:14]: 		K: 	ocean_shoal	 V: 	default	
[00:00:14]: 		K: 	ocean_waterplant	 V: 	ocean_default	
[00:00:14]: 		K: 	ocean_wobsterden	 V: 	default	
[00:00:14]: 		K: 	otters_setting	 V: 	default	
[00:00:14]: 		K: 	palmcone_seed_portalrate	 V: 	default	
[00:00:14]: 		K: 	palmconetree	 V: 	default	
[00:00:14]: 		K: 	palmconetree_regrowth	 V: 	default	
[00:00:14]: 		K: 	penguins	 V: 	default	
[00:00:14]: 		K: 	penguins_moon	 V: 	default	
[00:00:14]: 		K: 	perd	 V: 	default	
[00:00:14]: 		K: 	petrification	 V: 	default	
[00:00:14]: 		K: 	pigs	 V: 	default	
[00:00:14]: 		K: 	pigs_setting	 V: 	default	
[00:00:14]: 		K: 	pirateraids	 V: 	default	
[00:00:14]: 		K: 	ponds	 V: 	default	
[00:00:14]: 		K: 	portal_spawnrate	 V: 	default	
[00:00:14]: 		K: 	portalresurection	 V: 	always	
[00:00:14]: 		K: 	powder_monkey_portalrate	 V: 	default	
[00:00:14]: 		K: 	prefabswaps_start	 V: 	default	
[00:00:14]: 		K: 	rabbits	 V: 	default	
[00:00:14]: 		K: 	rabbits_setting	 V: 	default	
[00:00:14]: 		K: 	reeds	 V: 	default	
[00:00:14]: 		K: 	reeds_regrowth	 V: 	default	
[00:00:14]: 		K: 	regrowth	 V: 	default	
[00:00:14]: 		K: 	resettime	 V: 	none	
[00:00:14]: 		K: 	rifts_enabled	 V: 	default	
[00:00:14]: 		K: 	rifts_frequency	 V: 	default	
[00:00:14]: 		K: 	roads	 V: 	default	
[00:00:14]: 		K: 	rock	 V: 	default	
[00:00:14]: 		K: 	rock_ice	 V: 	default	
[00:00:14]: 		K: 	saltstack_regrowth	 V: 	default	
[00:00:14]: 		K: 	sapling	 V: 	default	
[00:00:14]: 		K: 	season_start	 V: 	default	
[00:00:14]: 		K: 	seasonalstartingitems	 V: 	default	
[00:00:14]: 		K: 	shadowcreatures	 V: 	default	
[00:00:14]: 		K: 	sharkboi	 V: 	default	
[00:00:14]: 		K: 	sharks	 V: 	default	
[00:00:14]: 		K: 	spawnmode	 V: 	fixed	
[00:00:14]: 		K: 	spawnprotection	 V: 	default	
[00:00:14]: 		K: 	specialevent	 V: 	default	
[00:00:14]: 		K: 	spider_warriors	 V: 	default	
[00:00:14]: 		K: 	spiderqueen	 V: 	default	
[00:00:14]: 		K: 	spiders	 V: 	default	
[00:00:14]: 		K: 	spiders_setting	 V: 	default	
[00:00:14]: 		K: 	spring	 V: 	default	
[00:00:14]: 		K: 	squid	 V: 	default	
[00:00:14]: 		K: 	stageplays	 V: 	default	
[00:00:14]: 		K: 	start_location	 V: 	default	
[00:00:14]: 		K: 	summer	 V: 	default	
[00:00:14]: 		K: 	summerhounds	 V: 	default	
[00:00:14]: 		K: 	tallbirds	 V: 	default	
[00:00:14]: 		K: 	task_set	 V: 	default	
[00:00:14]: 		K: 	temperaturedamage	 V: 	default	
[00:00:14]: 		K: 	tentacles	 V: 	default	
[00:00:14]: 		K: 	terrariumchest	 V: 	default	
[00:00:14]: 		K: 	touchstone	 V: 	default	
[00:00:14]: 		K: 	trees	 V: 	default	
[00:00:14]: 		K: 	tumbleweed	 V: 	default	
[00:00:14]: 		K: 	twiggytrees_regrowth	 V: 	default	
[00:00:14]: 		K: 	walrus	 V: 	default	
[00:00:14]: 		K: 	walrus_setting	 V: 	default	
[00:00:14]: 		K: 	wanderingtrader_enabled	 V: 	always	
[00:00:14]: 		K: 	wasps	 V: 	default	
[00:00:14]: 		K: 	weather	 V: 	default	
[00:00:14]: 		K: 	wildfires	 V: 	default	
[00:00:14]: 		K: 	winter	 V: 	default	
[00:00:14]: 		K: 	winterhounds	 V: 	default	
[00:00:14]: 		K: 	winters_feast	 V: 	default	
[00:00:14]: 		K: 	wobsters	 V: 	default	
[00:00:14]: 		K: 	world_size	 V: 	default	
[00:00:14]: 		K: 	wormhole_prefab	 V: 	wormhole	
[00:00:14]: 		K: 	year_of_the_beefalo	 V: 	default	
[00:00:14]: 		K: 	year_of_the_bunnyman	 V: 	default	
[00:00:14]: 		K: 	year_of_the_carrat	 V: 	default	
[00:00:14]: 		K: 	year_of_the_catcoon	 V: 	default	
[00:00:14]: 		K: 	year_of_the_dragonfly	 V: 	default	
[00:00:14]: 		K: 	year_of_the_gobbler	 V: 	default	
[00:00:14]: 		K: 	year_of_the_pig	 V: 	default	
[00:00:14]: 		K: 	year_of_the_snake	 V: 	default	
[00:00:14]: 		K: 	year_of_the_varg	 V: 	default	
[00:00:14]: 	K: 	playstyle	 V: 	endless	
[00:00:14]: 	K: 	random_set_pieces	 V: 	table: 0000000019A58430	
[00:00:14]: 		K: 	1	 V: 	Sculptures_2	
[00:00:14]: 		K: 	2	 V: 	Sculptures_3	
[00:00:14]: 		K: 	3	 V: 	Sculptures_4	
[00:00:14]: 		K: 	4	 V: 	Sculptures_5	
[00:00:14]: 		K: 	5	 V: 	Chessy_1	
[00:00:14]: 		K: 	6	 V: 	Chessy_2	
[00:00:14]: 		K: 	7	 V: 	Chessy_3	
[00:00:14]: 		K: 	8	 V: 	Chessy_4	
[00:00:14]: 		K: 	9	 V: 	Chessy_5	
[00:00:14]: 		K: 	10	 V: 	Chessy_6	
[00:00:14]: 		K: 	11	 V: 	Maxwell1	
[00:00:14]: 		K: 	12	 V: 	Maxwell2	
[00:00:14]: 		K: 	13	 V: 	Maxwell3	
[00:00:14]: 		K: 	14	 V: 	Maxwell4	
[00:00:14]: 		K: 	15	 V: 	Maxwell6	
[00:00:14]: 		K: 	16	 V: 	Maxwell7	
[00:00:14]: 		K: 	17	 V: 	Warzone_1	
[00:00:14]: 		K: 	18	 V: 	Warzone_2	
[00:00:14]: 		K: 	19	 V: 	Warzone_3	
[00:00:14]: 	K: 	required_prefabs	 V: 	table: 0000000019A57AD0	
[00:00:14]: 		K: 	1	 V: 	multiplayer_portal	
[00:00:14]: 	K: 	required_setpieces	 V: 	table: 0000000019A582F0	
[00:00:14]: 		K: 	1	 V: 	Sculptures_1	
[00:00:14]: 		K: 	2	 V: 	Maxwell5	
[00:00:14]: 	K: 	settings_desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:14]: 	K: 	settings_id	 V: 	ENDLESS	
[00:00:14]: 	K: 	settings_name	 V: 	无尽	
[00:00:14]: 	K: 	substitutes	 V: 	table: 0000000019A58700	
[00:00:14]: 	K: 	version	 V: 	4	
[00:00:14]: 	K: 	worldgen_desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:14]: 	K: 	worldgen_id	 V: 	ENDLESS	
[00:00:14]: 	K: 	worldgen_name	 V: 	无尽	
[00:00:14]: Loaded and applied level data override from ../leveldataoverride.lua	
[00:00:14]: Overwriting savedata with level data file.	
[00:00:14]: Not applying world gen overrides.	
[00:00:14]: [IPC] Signal 'DST_Master_WorldGen' opened  #0000000000000844
[00:00:14]: [IPC] Sending signal... #0000000000000844
[00:00:14]: WorldSim::SimThread::SimThread()
[00:00:14]: ABOUT TO INSTALL STACKTRACE
[00:00:14]: DoLuaFile scripts/stacktrace.lua
[00:00:14]: DoLuaFile loading buffer scripts/stacktrace.lua
[00:00:14]: INSTALLED STACKTRACE
[00:00:14]: Engine Seed: (1755410710 + 134465996) & 0x7FFFFFFF = 1889876706
[00:00:14]: WorldSim::SimThread::SimThread() complete
[00:00:14]: THREAD - started 'WorldSim' (4220)
[00:00:14]: WorldSim::SimThread::Main()
[00:00:14]: DoLuaFile scripts/worldgen_main.lua
[00:00:14]: DoLuaFile loading buffer scripts/worldgen_main.lua
[00:00:14]: Check for write access: TRUE
[00:00:14]: Check for read access: TRUE
[00:00:14]: Available disk space for save files: 47347 MB
[00:00:14]: ModIndex: Load sequence finished successfully.	
[00:00:14]: Reset() returning
[00:00:14]: DLC enabled : 	false	
[00:00:14]:   taskgrouplist:	default	Together	
[00:00:14]:   taskgrouplist:	classic	Classic	
[00:00:14]:   taskgrouplist:	cave_default	Underground	
[00:00:14]:   taskgrouplist:	lavaarena_taskset	The Forge	
[00:00:14]:   taskgrouplist:	quagmire_taskset	The Gorge	
[00:00:14]: running worldgen_main.lua
	
[00:00:14]: SEED = 	1889876706	
[00:00:14]: Generating world with these parameters:	
[00:00:14]: level_type	SURVIVAL	
[00:00:14]: level_data:	
[00:00:14]: 	K: 	desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:14]: 	K: 	hideminimap	 V: 	false	
[00:00:14]: 	K: 	id	 V: 	ENDLESS	
[00:00:14]: 	K: 	location	 V: 	forest	
[00:00:14]: 	K: 	max_playlist_position	 V: 	999	
[00:00:14]: 	K: 	min_playlist_position	 V: 	0	
[00:00:14]: 	K: 	name	 V: 	无尽	
[00:00:14]: 	K: 	numrandom_set_pieces	 V: 	4	
[00:00:14]: 	K: 	override_level_string	 V: 	false	
[00:00:14]: 	K: 	overrides	 V: 	table: 00000000191265E0	
[00:00:14]: 		K: 	alternatehunt	 V: 	default	
[00:00:14]: 		K: 	angrybees	 V: 	default	
[00:00:14]: 		K: 	antliontribute	 V: 	default	
[00:00:14]: 		K: 	autumn	 V: 	default	
[00:00:14]: 		K: 	balatro	 V: 	default	
[00:00:14]: 		K: 	bananabush_portalrate	 V: 	default	
[00:00:14]: 		K: 	basicresource_regrowth	 V: 	always	
[00:00:14]: 		K: 	bats_setting	 V: 	default	
[00:00:14]: 		K: 	bearger	 V: 	default	
[00:00:14]: 		K: 	beefalo	 V: 	default	
[00:00:14]: 		K: 	beefaloheat	 V: 	default	
[00:00:14]: 		K: 	beequeen	 V: 	default	
[00:00:14]: 		K: 	bees	 V: 	default	
[00:00:14]: 		K: 	bees_setting	 V: 	default	
[00:00:14]: 		K: 	berrybush	 V: 	default	
[00:00:14]: 		K: 	birds	 V: 	default	
[00:00:14]: 		K: 	boons	 V: 	default	
[00:00:14]: 		K: 	branching	 V: 	default	
[00:00:14]: 		K: 	brightmarecreatures	 V: 	default	
[00:00:14]: 		K: 	bunnymen_setting	 V: 	default	
[00:00:14]: 		K: 	butterfly	 V: 	default	
[00:00:14]: 		K: 	buzzard	 V: 	default	
[00:00:14]: 		K: 	cactus	 V: 	default	
[00:00:14]: 		K: 	cactus_regrowth	 V: 	default	
[00:00:14]: 		K: 	carrot	 V: 	default	
[00:00:14]: 		K: 	carrots_regrowth	 V: 	default	
[00:00:14]: 		K: 	catcoon	 V: 	default	
[00:00:14]: 		K: 	catcoons	 V: 	default	
[00:00:14]: 		K: 	chess	 V: 	default	
[00:00:14]: 		K: 	cookiecutters	 V: 	default	
[00:00:14]: 		K: 	crabking	 V: 	default	
[00:00:14]: 		K: 	crow_carnival	 V: 	default	
[00:00:14]: 		K: 	darkness	 V: 	default	
[00:00:14]: 		K: 	day	 V: 	default	
[00:00:14]: 		K: 	daywalker2	 V: 	default	
[00:00:14]: 		K: 	deciduousmonster	 V: 	default	
[00:00:14]: 		K: 	deciduoustree_regrowth	 V: 	default	
[00:00:14]: 		K: 	deerclops	 V: 	default	
[00:00:14]: 		K: 	dragonfly	 V: 	default	
[00:00:14]: 		K: 	dropeverythingondespawn	 V: 	default	
[00:00:14]: 		K: 	evergreen_regrowth	 V: 	default	
[00:00:14]: 		K: 	extrastartingitems	 V: 	default	
[00:00:14]: 		K: 	eyeofterror	 V: 	default	
[00:00:14]: 		K: 	fishschools	 V: 	default	
[00:00:14]: 		K: 	flint	 V: 	default	
[00:00:14]: 		K: 	flowers	 V: 	default	
[00:00:14]: 		K: 	flowers_regrowth	 V: 	default	
[00:00:14]: 		K: 	frograin	 V: 	default	
[00:00:14]: 		K: 	frogs	 V: 	default	
[00:00:14]: 		K: 	fruitfly	 V: 	default	
[00:00:14]: 		K: 	ghostenabled	 V: 	always	
[00:00:14]: 		K: 	ghostsanitydrain	 V: 	none	
[00:00:14]: 		K: 	gnarwail	 V: 	default	
[00:00:14]: 		K: 	goosemoose	 V: 	default	
[00:00:14]: 		K: 	grass	 V: 	default	
[00:00:14]: 		K: 	grassgekkos	 V: 	default	
[00:00:14]: 		K: 	hallowed_nights	 V: 	default	
[00:00:14]: 		K: 	has_ocean	 V: 	true	
[00:00:14]: 		K: 	healthpenalty	 V: 	always	
[00:00:14]: 		K: 	hound_mounds	 V: 	default	
[00:00:14]: 		K: 	houndmound	 V: 	default	
[00:00:14]: 		K: 	hounds	 V: 	default	
[00:00:14]: 		K: 	hunger	 V: 	default	
[00:00:14]: 		K: 	hunt	 V: 	default	
[00:00:14]: 		K: 	junkyard	 V: 	default	
[00:00:14]: 		K: 	keep_disconnected_tiles	 V: 	true	
[00:00:14]: 		K: 	klaus	 V: 	default	
[00:00:14]: 		K: 	krampus	 V: 	default	
[00:00:14]: 		K: 	layout_mode	 V: 	LinkNodesByKeys	
[00:00:14]: 		K: 	lessdamagetaken	 V: 	none	
[00:00:14]: 		K: 	liefs	 V: 	default	
[00:00:14]: 		K: 	lightcrab_portalrate	 V: 	default	
[00:00:14]: 		K: 	lightning	 V: 	default	
[00:00:14]: 		K: 	lightninggoat	 V: 	default	
[00:00:14]: 		K: 	loop	 V: 	default	
[00:00:14]: 		K: 	lunarhail_frequency	 V: 	default	
[00:00:14]: 		K: 	lureplants	 V: 	default	
[00:00:14]: 		K: 	malbatross	 V: 	default	
[00:00:14]: 		K: 	marshbush	 V: 	default	
[00:00:14]: 		K: 	merm	 V: 	default	
[00:00:14]: 		K: 	merms	 V: 	default	
[00:00:14]: 		K: 	meteorshowers	 V: 	default	
[00:00:14]: 		K: 	meteorspawner	 V: 	default	
[00:00:14]: 		K: 	moles	 V: 	default	
[00:00:14]: 		K: 	moles_setting	 V: 	default	
[00:00:14]: 		K: 	monkeytail_portalrate	 V: 	default	
[00:00:14]: 		K: 	moon_berrybush	 V: 	default	
[00:00:14]: 		K: 	moon_bullkelp	 V: 	default	
[00:00:14]: 		K: 	moon_carrot	 V: 	default	
[00:00:14]: 		K: 	moon_fissure	 V: 	default	
[00:00:14]: 		K: 	moon_fruitdragon	 V: 	default	
[00:00:14]: 		K: 	moon_hotspring	 V: 	default	
[00:00:14]: 		K: 	moon_rock	 V: 	default	
[00:00:14]: 		K: 	moon_sapling	 V: 	default	
[00:00:14]: 		K: 	moon_spider	 V: 	default	
[00:00:14]: 		K: 	moon_spiders	 V: 	default	
[00:00:14]: 		K: 	moon_starfish	 V: 	default	
[00:00:14]: 		K: 	moon_tree	 V: 	default	
[00:00:14]: 		K: 	moon_tree_regrowth	 V: 	default	
[00:00:14]: 		K: 	mosquitos	 V: 	default	
[00:00:14]: 		K: 	mushroom	 V: 	default	
[00:00:14]: 		K: 	mutated_hounds	 V: 	default	
[00:00:14]: 		K: 	no_joining_islands	 V: 	true	
[00:00:14]: 		K: 	no_wormholes_to_disconnected_tiles	 V: 	true	
[00:00:14]: 		K: 	ocean_bullkelp	 V: 	default	
[00:00:14]: 		K: 	ocean_otterdens	 V: 	default	
[00:00:14]: 		K: 	ocean_seastack	 V: 	ocean_default	
[00:00:14]: 		K: 	ocean_shoal	 V: 	default	
[00:00:14]: 		K: 	ocean_waterplant	 V: 	ocean_default	
[00:00:14]: 		K: 	ocean_wobsterden	 V: 	default	
[00:00:14]: 		K: 	otters_setting	 V: 	default	
[00:00:14]: 		K: 	palmcone_seed_portalrate	 V: 	default	
[00:00:14]: 		K: 	palmconetree	 V: 	default	
[00:00:14]: 		K: 	palmconetree_regrowth	 V: 	default	
[00:00:14]: 		K: 	penguins	 V: 	default	
[00:00:14]: 		K: 	penguins_moon	 V: 	default	
[00:00:14]: 		K: 	perd	 V: 	default	
[00:00:14]: 		K: 	petrification	 V: 	default	
[00:00:14]: 		K: 	pigs	 V: 	default	
[00:00:14]: 		K: 	pigs_setting	 V: 	default	
[00:00:14]: 		K: 	pirateraids	 V: 	default	
[00:00:14]: 		K: 	ponds	 V: 	default	
[00:00:14]: 		K: 	portal_spawnrate	 V: 	default	
[00:00:14]: 		K: 	portalresurection	 V: 	always	
[00:00:14]: 		K: 	powder_monkey_portalrate	 V: 	default	
[00:00:14]: 		K: 	prefabswaps_start	 V: 	default	
[00:00:14]: 		K: 	rabbits	 V: 	default	
[00:00:14]: 		K: 	rabbits_setting	 V: 	default	
[00:00:14]: 		K: 	reeds	 V: 	default	
[00:00:14]: 		K: 	reeds_regrowth	 V: 	default	
[00:00:14]: 		K: 	regrowth	 V: 	default	
[00:00:14]: 		K: 	resettime	 V: 	none	
[00:00:14]: 		K: 	rifts_enabled	 V: 	default	
[00:00:14]: 		K: 	rifts_frequency	 V: 	default	
[00:00:14]: 		K: 	roads	 V: 	default	
[00:00:14]: 		K: 	rock	 V: 	default	
[00:00:14]: 		K: 	rock_ice	 V: 	default	
[00:00:14]: 		K: 	saltstack_regrowth	 V: 	default	
[00:00:14]: 		K: 	sapling	 V: 	default	
[00:00:14]: 		K: 	season_start	 V: 	default	
[00:00:14]: 		K: 	seasonalstartingitems	 V: 	default	
[00:00:14]: 		K: 	shadowcreatures	 V: 	default	
[00:00:14]: 		K: 	sharkboi	 V: 	default	
[00:00:14]: 		K: 	sharks	 V: 	default	
[00:00:14]: 		K: 	spawnmode	 V: 	fixed	
[00:00:14]: 		K: 	spawnprotection	 V: 	default	
[00:00:14]: 		K: 	specialevent	 V: 	default	
[00:00:14]: 		K: 	spider_warriors	 V: 	default	
[00:00:14]: 		K: 	spiderqueen	 V: 	default	
[00:00:14]: 		K: 	spiders	 V: 	default	
[00:00:14]: 		K: 	spiders_setting	 V: 	default	
[00:00:14]: 		K: 	spring	 V: 	default	
[00:00:14]: 		K: 	squid	 V: 	default	
[00:00:14]: 		K: 	stageplays	 V: 	default	
[00:00:14]: 		K: 	start_location	 V: 	default	
[00:00:14]: 		K: 	summer	 V: 	default	
[00:00:14]: 		K: 	summerhounds	 V: 	default	
[00:00:14]: 		K: 	tallbirds	 V: 	default	
[00:00:14]: 		K: 	task_set	 V: 	default	
[00:00:14]: 		K: 	temperaturedamage	 V: 	default	
[00:00:14]: 		K: 	tentacles	 V: 	default	
[00:00:14]: 		K: 	terrariumchest	 V: 	default	
[00:00:14]: 		K: 	touchstone	 V: 	default	
[00:00:14]: 		K: 	trees	 V: 	default	
[00:00:14]: 		K: 	tumbleweed	 V: 	default	
[00:00:14]: 		K: 	twiggytrees_regrowth	 V: 	default	
[00:00:14]: 		K: 	walrus	 V: 	default	
[00:00:14]: 		K: 	walrus_setting	 V: 	default	
[00:00:14]: 		K: 	wanderingtrader_enabled	 V: 	always	
[00:00:14]: 		K: 	wasps	 V: 	default	
[00:00:14]: 		K: 	weather	 V: 	default	
[00:00:14]: 		K: 	wildfires	 V: 	default	
[00:00:14]: 		K: 	winter	 V: 	default	
[00:00:14]: 		K: 	winterhounds	 V: 	default	
[00:00:14]: 		K: 	winters_feast	 V: 	default	
[00:00:14]: 		K: 	wobsters	 V: 	default	
[00:00:14]: 		K: 	world_size	 V: 	default	
[00:00:14]: 		K: 	wormhole_prefab	 V: 	wormhole	
[00:00:14]: 		K: 	year_of_the_beefalo	 V: 	default	
[00:00:14]: 		K: 	year_of_the_bunnyman	 V: 	default	
[00:00:14]: 		K: 	year_of_the_carrat	 V: 	default	
[00:00:14]: 		K: 	year_of_the_catcoon	 V: 	default	
[00:00:14]: 		K: 	year_of_the_dragonfly	 V: 	default	
[00:00:14]: 		K: 	year_of_the_gobbler	 V: 	default	
[00:00:14]: 		K: 	year_of_the_pig	 V: 	default	
[00:00:14]: 		K: 	year_of_the_snake	 V: 	default	
[00:00:14]: 		K: 	year_of_the_varg	 V: 	default	
[00:00:14]: 	K: 	playstyle	 V: 	endless	
[00:00:14]: 	K: 	random_set_pieces	 V: 	table: 0000000019124510	
[00:00:14]: 		K: 	1	 V: 	Sculptures_2	
[00:00:14]: 		K: 	2	 V: 	Sculptures_3	
[00:00:14]: 		K: 	3	 V: 	Sculptures_4	
[00:00:14]: 		K: 	4	 V: 	Sculptures_5	
[00:00:14]: 		K: 	5	 V: 	Chessy_1	
[00:00:14]: 		K: 	6	 V: 	Chessy_2	
[00:00:14]: 		K: 	7	 V: 	Chessy_3	
[00:00:14]: 		K: 	8	 V: 	Chessy_4	
[00:00:14]: 		K: 	9	 V: 	Chessy_5	
[00:00:14]: 		K: 	10	 V: 	Chessy_6	
[00:00:14]: 		K: 	11	 V: 	Maxwell1	
[00:00:14]: 		K: 	12	 V: 	Maxwell2	
[00:00:14]: 		K: 	13	 V: 	Maxwell3	
[00:00:14]: 		K: 	14	 V: 	Maxwell4	
[00:00:14]: 		K: 	15	 V: 	Maxwell6	
[00:00:14]: 		K: 	16	 V: 	Maxwell7	
[00:00:14]: 		K: 	17	 V: 	Warzone_1	
[00:00:14]: 		K: 	18	 V: 	Warzone_2	
[00:00:14]: 		K: 	19	 V: 	Warzone_3	
[00:00:14]: 	K: 	required_prefabs	 V: 	table: 0000000019125000	
[00:00:14]: 		K: 	1	 V: 	multiplayer_portal	
[00:00:14]: 	K: 	required_setpieces	 V: 	table: 0000000019124420	
[00:00:14]: 		K: 	1	 V: 	Sculptures_1	
[00:00:14]: 		K: 	2	 V: 	Maxwell5	
[00:00:14]: 	K: 	settings_desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:14]: 	K: 	settings_id	 V: 	ENDLESS	
[00:00:14]: 	K: 	settings_name	 V: 	无尽	
[00:00:14]: 	K: 	substitutes	 V: 	table: 0000000019124880	
[00:00:14]: 	K: 	version	 V: 	4	
[00:00:14]: 	K: 	worldgen_desc	 V: 	永不结束的饥荒沙盒模式。
永远可以在绚丽之门复活。	
[00:00:14]: 	K: 	worldgen_id	 V: 	ENDLESS	
[00:00:14]: 	K: 	worldgen_name	 V: 	无尽	
[00:00:14]: 
#######
#
# Generating SURVIVAL Mode Level
#
#######
	
[00:00:14]: Prefab Swap Selection: grass gekko	
[00:00:14]: Prefab Swap Selection: regular twigs	
[00:00:14]: Prefab Swap Selection: juicy berries	
[00:00:14]: Sculptures_1 added to task MooseBreedingTask	
[00:00:14]: Maxwell5 added to task Badlands	
[00:00:14]: Warzone_2 added to task MooseBreedingTask	
[00:00:14]: Maxwell7 added to task For a nice walk	
[00:00:14]: Chessy_2 added to task Frogs and bugs	
[00:00:14]: Maxwell1 added to task Lightning Bluff	
[00:00:14]: New size:	425	default	
[00:00:14]: Creating story...	
[00:00:14]: [Story Gen] Generate nodes. Starting at: 'Make a pick'	
[00:00:14]: [Story Gen] LinkNodesByKeys	
[00:00:14]: Finding valid start task...	
[00:00:14]:    ...picked 	Make a pick	
[00:00:14]: Has start node	Clearing	
[00:00:14]: Adding Background Nodes	
[00:00:14]: [Story Gen] Adding Cove Nodes	
[00:00:14]: [Ocean] Processing ocean fake room content.	
[00:00:15]: [WorldSimActual::WorldGen_InitializeNodePoints]
[00:00:15]: [WorldSimActual::WorldGen_VoronoiPass]
[00:00:15]: GenerateVoronoiMap [100]:
[00:00:16]: ...Done.
[00:00:16]: [Story Gen] Finding nodes on mainland to connect a region to.	
[00:00:16]: [Story Gen] Generate nodes. Starting at: 'MoonIsland_IslandShards'	
[00:00:16]: [Story Gen] RestrictNodesByKey	
[00:00:16]: [Story Gen] Adding Cove Nodes	
[00:00:16]: [WorldSimActual::WorldGen_AddNewPositions]
[00:00:16]: [WorldSimActual::WorldGen_VoronoiPass]
[00:00:16]: GenerateVoronoiMap [50]:
[00:00:17]: ...Done.
[00:00:17]: [MoonIsland_Forest:COVE_0:Empty_Cove] poly.size() == 0
[00:00:17]: [!]	 edge == NULL
[00:00:17]: ... story created	
[00:00:17]: Baking map...	425	
[00:00:17]: [WorldSimActual::WorldGen_Commit] worldgen success.
[00:00:17]: [WorldSimActual::ConvertToTileMap]
[00:00:17]: [ConvertToTileMap]
[00:00:17]: [WorldSimActual::ConvertToTileMap] complete
[00:00:17]: [WorldSimActual::SeparateIslands]
[00:00:17]: [SeparateIslands]
[00:00:17]: [WorldSimActual::SeparateIslands] complete
[00:00:17]: Map Baked!	
[00:00:17]: [WorldSimActual::ForceConnectivity]
[00:00:17]: [GenerateLandmasses]
[00:00:17]: [GenerateLandmasses] islands: 11
[00:00:17]: [MergeConnectedLandmasses] false
[00:00:17]: [WorldSimActual::ForceConnectivity] complete
[00:00:17]: [WorldSimActual::DrawRoads]
[00:00:17]: [DrawRoads]
[00:00:17]: [WorldSimActual::DrawRoads] complete
[00:00:17]: Encoding...	
[00:00:17]: [WorldSimActual::CreateNodeIdTileMap]
[00:00:17]: Encoding... DONE	
[00:00:17]: Checking Tags	
[00:00:17]: Populating voronoi...	
[00:00:17]: Warning! Could not find a spot for LivingTree in node For a nice walk:7:DeepForest	
[00:00:17]: [ReplaceSingleNonLandTiles] Validating...
[00:00:17]: [ReplaceSingleNonLandTiles] Replaced 6 tiles.
[00:00:17]: Not checking for disconnected tiles.	
[00:00:18]: [Ocean] Placing ocean set pieces.	
[00:00:18]: [Ocean] Placed 11 of 11 ocean set pieces.	
[00:00:18]: [Ocean] Convert impassible to water...	
[00:00:18]: [Ocean]  Square fill...	
[00:00:20]: [Ocean]  Ground fill...	
[00:00:20]: [Ocean]  Noise...	
[00:00:20]: [Ocean]  Blend...	
[00:00:21]: [Ocean]  Adding shoreline...	
[00:00:21]: [Ocean] Void Outline...	
[00:00:21]: [Ocean] Populating the ocean with lots of fun things to do...	
[00:00:21]: [Ocean] Placing ocean set pieces.	
[00:00:21]: [Ocean] Placed 9 of 9 ocean set pieces.	
[00:00:21]: [Ocean] Placing ocean set pieces.	
[00:00:21]: [Ocean] Placed 2 of 2 ocean set pieces.	
[00:00:21]: [Ocean] Placing ocean set pieces.	
[00:00:21]: [Ocean] Placed 2 of 2 ocean set pieces.	
[00:00:21]: Checking Required Prefab moon_altar_rock_glass has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab sculpture_bishop has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab pigking has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab moon_fissure has at least 2 instances (86 found).	
[00:00:21]: Checking Required Prefab monkeyqueen has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab terrariumchest has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab gravestone has at least 1 instances (13 found).	
[00:00:21]: Checking Required Prefab statueglommer has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab waterplant has at least 1 instances (112 found).	
[00:00:21]: Checking Required Prefab balatro_machine has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab sculpture_rook has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab hermithouse_construction1 has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab moon_altar_rock_seed has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab statueharp_hedgespawner has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab crabking_spawner has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab moon_altar_rock_idol has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab junk_pile_big has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab sculpture_knight has at least 1 instances (1 found).	
[00:00:21]: Checking Required Prefab charlie_stage_post has at least 1 instances (1 found).	
[00:00:21]: [ReplaceSingleNonLandTiles] Validating...
[00:00:21]: [ReplaceSingleNonLandTiles] Replaced 0 tiles.
[00:00:21]: Done forest map gen!	
[00:00:21]: Checking map...	
[00:00:21]: Generation complete, injecting world entities.	
[00:00:21]: Injected world entities.	
[00:00:22]: WorldSim::SimThread::Main() complete
[00:00:22]: Serializing world: session/03A6003A280B8C61/0000000002
[00:00:22]: Klump load on boot started.	
[00:00:22]: Klump files loaded: 	0	
[00:00:22]: 	Unload FE	
[00:00:22]: 	Unload FE done	
[00:00:24]: 	LOAD BE	
[00:01:13]: 	LOAD BE: done	
[00:01:14]: Begin Session: 03A6003A280B8C61
[00:01:14]: saving to server_temp/server_save	
[00:01:14]: OVERRIDE: setting	healthpenalty	to	always	
[00:01:14]: OVERRIDE: setting	wanderingtrader_enabled	to	always	
[00:01:14]: OVERRIDE: setting	lessdamagetaken	to	none	
[00:01:14]: MiniMapComponent::AddAtlas( minimap/minimap_data1.xml )
[00:01:14]: MiniMapComponent::AddAtlas( minimap/minimap_data2.xml )
[00:01:14]: Loading 19 new character(s)	
[00:01:20]: Total 19 character(s) loaded	
[00:01:20]: Loading Nav Grid	
[00:01:20]: World generated on build 682257 with save version: 5.156, using seed: 1889876706	
[00:01:20]: OVERRIDE: setting	ghostenabled	to	always	
[00:01:20]: OVERRIDE: setting	resettime	to	none	
[00:01:20]: OVERRIDE: setting	basicresource_regrowth	to	always	
[00:01:20]: OVERRIDE: setting	portalresurection	to	always	
[00:01:20]: OVERRIDE: setting	spawnmode	to	fixed	
[00:01:20]: OVERRIDE: setting	ghostsanitydrain	to	none	
[00:01:24]: Reconstructing topology	
[00:01:24]: 	...Sorting points	
[00:01:24]: 	...Sorting edges	
[00:01:24]: 	...Connecting nodes	
[00:01:24]: 	...Validating connections	
[00:01:24]: 	...Housekeeping	
[00:01:24]: 	...Done!	
[00:01:24]: [Special Event] Setting up crow_carnival	
[00:01:24]: 1 uploads added to server. From server_temp
[00:01:24]: About to start a shard with these settings:
[00:01:24]:   ShardName: [SHDMASTER]
[00:01:24]:   ShardID: 1
[00:01:24]:   ShardRole: MASTER
[00:01:24]:   MasterHost: (null)
[00:01:24]:   MasterBind: 127.0.0.1
[00:01:24]:   MasterPort: 10888
[00:01:24]: [Shard] Starting master server
[00:01:24]: [Warning] Could not confirm port 10888 is open in the firewall. 
[00:01:24]: [Shard] Shard server started on port: 10888
[00:01:24]: [IPC] Signal 'DST_Master_Ready' opened  #0000000000000A8C
[00:01:24]: [IPC] Sending signal... #0000000000000A8C
[00:01:24]: Telling Client our new session identifier: 03A6003A280B8C61
[00:01:24]: Validating portal[1] <-> <nil>[1] (inactive)	
[00:01:24]: Validating portal[2] <-> <nil>[2] (inactive)	
[00:01:24]: Validating portal[3] <-> <nil>[3] (inactive)	
[00:01:25]: Validating portal[4] <-> <nil>[4] (inactive)	
[00:01:25]: Validating portal[5] <-> <nil>[5] (inactive)	
[00:01:25]: Validating portal[6] <-> <nil>[6] (inactive)	
[00:01:25]: Validating portal[7] <-> <nil>[7] (inactive)	
[00:01:25]: Validating portal[8] <-> <nil>[8] (inactive)	
[00:01:25]: Validating portal[9] <-> <nil>[9] (inactive)	
[00:01:25]: Validating portal[10] <-> <nil>[10] (inactive)	
[00:01:25]: Server registered via geo DNS in ap-east-1
[00:01:25]: Sim paused
[00:01:26]: [Shard] Secondary shard Caves(4185098232) connected: [LAN] 127.0.0.1
[00:01:27]: [Shard] Secondary Caves(4185098232) ready!
[00:01:27]: World 4185098232 is now connected	
[00:01:27]: [SyncWorldSettings] Sending master world option ghostsanitydrain = none to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option darkness = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option resettime = none to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option hunger = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option healthpenalty = always to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option temperaturedamage = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option spawnmode = fixed to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option shadowcreatures = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option ghostenabled = always to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option brightmarecreatures = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option lessdamagetaken = none to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option portalresurection = always to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option basicresource_regrowth = always to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option krampus = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Sending master world option dropeverythingondespawn = default to secondary shards.	
[00:01:27]: Validating portal[1] <-> 4185098232[1] (disabled)	
[00:01:27]: Validating portal[2] <-> 4185098232[2] (disabled)	
[00:01:27]: Validating portal[3] <-> 4185098232[3] (disabled)	
[00:01:27]: Validating portal[4] <-> 4185098232[4] (disabled)	
[00:01:27]: Validating portal[5] <-> 4185098232[5] (disabled)	
[00:01:27]: Validating portal[6] <-> 4185098232[6] (disabled)	
[00:01:27]: Validating portal[7] <-> 4185098232[7] (disabled)	
[00:01:27]: Validating portal[8] <-> 4185098232[8] (disabled)	
[00:01:27]: Validating portal[9] <-> 4185098232[9] (disabled)	
[00:01:27]: Validating portal[10] <-> 4185098232[10] (disabled)	
[00:01:27]: [SyncWorldSettings] Resyncing master world option ghostsanitydrain = none to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option darkness = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option resettime = none to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option hunger = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option healthpenalty = always to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option temperaturedamage = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option spawnmode = fixed to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option shadowcreatures = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option ghostenabled = always to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option brightmarecreatures = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option lessdamagetaken = none to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option portalresurection = always to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option basicresource_regrowth = always to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option krampus = default to secondary shards.	
[00:01:27]: [SyncWorldSettings] Resyncing master world option dropeverythingondespawn = default to secondary shards.	
[00:01:29]: New incoming connection 127.0.0.1|62146 <3389270444105044616>
[00:01:29]: Client connected from [LAN] 127.0.0.1|62146 <3389270444105044616>
[00:01:29]: ValidateGameSessionToken GUID<3389270444105044616>
[00:01:30]: Client authenticated: (KU_F4GEm1KF) Brain
[00:01:30]: [Steam] Authenticated host '76561198335710377'
[00:01:31]: There is no active event to validate against.
[00:01:31]: [Shard] Read save location file for (KU_F4GEm1KF)
[00:02:10]: Resuming user: session/03A6003A280B8C61/A7HS8G7C058F
[00:02:19]: Spawn request: wilson from Brain
[00:02:19]: Skin request: () () () () ()
[00:02:19]: Skill Selection request: 0
[00:02:19]: User ID	KU_F4GEm1KF	assigned ownership to entity	117504 - wilson	
[00:02:19]: Spawning player at: [Fixed] (-170.00, 0.00, -330.00)	
[00:02:19]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000003
[00:02:19]: Sim unpaused
[00:02:23]: Server Autopaused	
[00:02:30]: Server Unpaused	
[00:03:04]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "hambat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("hambat", "hambat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "hambat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "hambat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-171.56, -314.86)
[00:03:11]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "footballhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("footballhat", "footballhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "footballhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "footballhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-174.33, -305.27)
[00:03:29]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "cane" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("cane", "cane", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "cane" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "cane" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-170.11, -320.23)
[00:03:50]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "spiderqueen" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("spiderqueen", "spiderqueen", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "spiderqueen" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "spiderqueen" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-172.96, -308.96)
[00:05:21]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "deerclops_eyeball" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("deerclops_eyeball", "deerclops_eyeball", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "deerclops_eyeball" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "deerclops_eyeball" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-172.31, -309.36)
[00:05:22]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "deerclops_eyeball" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("deerclops_eyeball", "deerclops_eyeball", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "deerclops_eyeball" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "deerclops_eyeball" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-172.67, -309.19)
[00:05:22]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "deerclops_eyeball" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("deerclops_eyeball", "deerclops_eyeball", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "deerclops_eyeball" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "deerclops_eyeball" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-172.67, -309.19)
[00:05:47]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "trunk_cooked" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("trunk_cooked", "trunk_cooked", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "trunk_cooked" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "trunk_cooked" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-173.08, -296.61)
[00:06:13]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.sanity if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-166.84, -299.06)
[00:06:27]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "beequeen" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("beequeen", "beequeen", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "beequeen" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "beequeen" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-176.86, -312.08)
[00:06:32]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-173.77, -290.91)
[00:06:38]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "footballhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("footballhat", "footballhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "footballhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "footballhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-184.44, -293.49)
[00:06:39]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "footballhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("footballhat", "footballhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "footballhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "footballhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-188.31, -289.59)
[00:06:39]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "footballhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("footballhat", "footballhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "footballhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "footballhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-189.17, -288.73)
[00:06:47]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-155.61, -294.41)
[00:07:01]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-115.82, -299.18)
[00:07:15]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-163.48, -301.26)
[00:07:43]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-119.57, -301.47)
[00:08:12]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "icestaff" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("icestaff", "icestaff", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "icestaff" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "icestaff" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-104.02, -304.25)
[00:08:22]: Server Autopaused	
[00:08:23]: Server Unpaused	
[00:09:09]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(TheWorld:PushEvent("ms_nextphase")) @(-183.84, -306.89)
[00:09:10]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(TheWorld:PushEvent("ms_nextphase")) @(-183.84, -306.89)
[00:09:11]: Available disk space for save files: 47342 MB
[00:09:11]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000003
[00:09:11]: Serializing world: session/03A6003A280B8C61/0000000003
[00:09:25]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "beequeen" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("beequeen", "beequeen", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "beequeen" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "beequeen" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-181.99, -312.34)
[00:10:36]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-199.82, -274.60)
[00:10:58]: Could not find anim [death] in bank [ghost]
[00:10:58]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000004
[00:11:14]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end player:PushEvent("respawnfromghost") player.rezsource = "TMIP 控制台") @(-183.20, -324.20)
[00:11:14]: Could not find anim [idle_loop] in bank [ghost]
[00:11:17]: Could not find anim [transform] in bank [wilson]
[00:11:19]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000004
[00:11:21]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-181.18, -319.81)
[00:11:59]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "bearger" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("bearger", "bearger", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "bearger" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "bearger" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-162.02, -313.47)
[00:12:16]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "footballhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("footballhat", "footballhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "footballhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "footballhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-104.46, -294.25)
[00:12:17]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-89.33, -282.87)
[00:13:21]: Could not find anim [death] in bank [ghost]
[00:13:21]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000004
[00:13:26]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end player:PushEvent("respawnfromghost") player.rezsource = "TMIP 控制台") @(-140.80, -241.71)
[00:13:26]: Could not find anim [idle_loop] in bank [ghost]
[00:13:29]: Could not find anim [transform] in bank [wilson]
[00:13:30]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000004
[00:13:32]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-134.05, -244.07)
[00:13:56]: Could not find anim [death] in bank [ghost]
[00:13:56]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000004
[00:14:00]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end player:PushEvent("respawnfromghost") player.rezsource = "TMIP 控制台") @(-146.10, -269.16)
[00:14:00]: Could not find anim [idle_loop] in bank [ghost]
[00:14:03]: Could not find anim [transform] in bank [wilson]
[00:14:04]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000004
[00:14:05]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(TheWorld:PushEvent("ms_nextphase")) @(-153.53, -277.18)
[00:14:06]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(TheWorld:PushEvent("ms_nextphase")) @(-153.15, -277.02)
[00:14:07]: Available disk space for save files: 47334 MB
[00:14:07]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000004
[00:14:07]: Serializing world: session/03A6003A280B8C61/0000000004
[00:14:11]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-136.32, -272.41)
[00:14:11]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.sanity if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-135.73, -273.10)
[00:14:12]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.hunger if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-135.32, -273.47)
[00:14:30]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "wathgrithrhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("wathgrithrhat", "wathgrithrhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "wathgrithrhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "wathgrithrhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-90.13, -275.35)
[00:16:57]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-19.79, -301.21)
[00:16:57]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.sanity if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-19.24, -301.60)
[00:16:57]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.hunger if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-18.78, -302.20)
[00:17:03]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "spear_wathgrithr" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("spear_wathgrithr", "spear_wathgrithr", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "spear_wathgrithr" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "spear_wathgrithr" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-31.23, -312.32)
[00:17:32]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "warg" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("warg", "warg", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "warg" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "warg" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-91.37, -260.68)
[00:18:39]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.hunger if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-5.28, -310.97)
[00:18:40]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-4.16, -312.26)
[00:18:41]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.sanity if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-0.78, -315.56)
[00:18:44]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "wathgrithrhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("wathgrithrhat", "wathgrithrhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "wathgrithrhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "wathgrithrhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(4.88, -332.40)
[00:18:45]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "wathgrithrhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("wathgrithrhat", "wathgrithrhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "wathgrithrhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "wathgrithrhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(7.71, -332.27)
[00:19:15]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-4.84, -276.75)
[00:19:16]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.sanity if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-5.94, -275.67)
[00:19:16]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.hunger if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-7.48, -274.11)
[00:19:38]: Server Autopaused	
[00:19:41]: Server Unpaused	
[00:19:51]: Server Autopaused	
[00:27:33]: Server Unpaused	
[00:27:38]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local p = player local b = p.components.builder local t = p.components.talker if p and b and t then t:Say(b.freebuildmode and "创造模式:禁用" or "创造模式:启用") b:GiveAllRecipes() end) @(-74.35, -308.61)
[00:27:39]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local p = player local b = p.components.builder local t = p.components.talker if p and b and t then t:Say(b.freebuildmode and "创造模式:禁用" or "创造模式:启用") b:GiveAllRecipes() end) @(-74.35, -308.61)
[00:27:41]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local p = player local b = p.components.builder local t = p.components.talker if p and b and t then t:Say(b.freebuildmode and "创造模式:禁用" or "创造模式:启用") b:GiveAllRecipes() end) @(-74.34, -308.60)
[00:27:53]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local p = player local h = p.components.health local t = p.components.talker if p ~= nil then if p:HasTag("playerghost") then p:PushEvent("respawnfromghost") p.rezsource = "TMIP 控制台" else if h ~= nil then local godmode = h.invincible t:Say(godmode and "上帝模式:禁用" or "上帝模式:启用") h:SetInvincible(not godmode) end end end) @(-74.95, -307.98)
[00:27:57]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(TheWorld:PushEvent("ms_nextphase")) @(-91.21, -315.32)
[00:27:58]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(TheWorld:PushEvent("ms_nextphase")) @(-91.13, -315.40)
[00:27:59]: Available disk space for save files: 47326 MB
[00:27:59]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000005
[00:27:59]: Serializing world: session/03A6003A280B8C61/0000000005
[00:28:03]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "hambat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("hambat", "hambat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "hambat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "hambat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-86.48, -328.63)
[00:28:17]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "beequeen" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("beequeen", "beequeen", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "beequeen" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "beequeen" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-123.52, -302.29)
[00:28:29]: Server Autopaused	
[00:28:30]: Server Unpaused	
[00:28:35]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local p = player local h = p.components.health local t = p.components.talker if p ~= nil then if p:HasTag("playerghost") then p:PushEvent("respawnfromghost") p.rezsource = "TMIP 控制台" else if h ~= nil then local godmode = h.invincible t:Say(godmode and "上帝模式:禁用" or "上帝模式:启用") h:SetInvincible(not godmode) end end end) @(-119.79, -269.74)
[00:28:45]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "wathgrithrhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("wathgrithrhat", "wathgrithrhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "wathgrithrhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "wathgrithrhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-89.80, -308.16)
[00:28:45]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "wathgrithrhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("wathgrithrhat", "wathgrithrhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "wathgrithrhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "wathgrithrhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-89.29, -308.67)
[00:28:46]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "wathgrithrhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("wathgrithrhat", "wathgrithrhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "wathgrithrhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "wathgrithrhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-88.76, -309.20)
[00:28:46]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "wathgrithrhat" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("wathgrithrhat", "wathgrithrhat", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "wathgrithrhat" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "wathgrithrhat" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-88.24, -309.72)
[00:28:47]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "icestaff" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("icestaff", "icestaff", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "icestaff" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "icestaff" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-81.28, -323.04)
[00:28:48]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "icestaff" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("icestaff", "icestaff", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "icestaff" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "icestaff" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-80.33, -323.98)
[00:29:15]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-109.55, -294.86)
[00:29:15]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.sanity if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-108.95, -295.51)
[00:29:16]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.hunger if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-108.55, -295.86)
[00:29:18]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then UserToPlayer("KU_F4GEm1KF").components.talker:Say("该玩家与你不在同一世界！命令无法生效。") end local function onturnon(inst) if inst._stage == 3 then if inst.AnimState:IsCurrentAnimation("proximity_pre") or inst.AnimState:IsCurrentAnimation("proximity_loop") or inst.AnimState:IsCurrentAnimation("place3") then inst.AnimState:PushAnimation("proximity_pre") else inst.AnimState:PlayAnimation("proximity_pre") end inst.AnimState:PushAnimation("proximity_loop", true) end end local function onturnoff(inst) if inst._stage == 3 then inst.AnimState:PlayAnimation("proximity_pst") inst.AnimState:PushAnimation("idle3", false) end end if player ~= nil and player.Transform then	if "beequeen" == "klaus" then	local pos = player:GetPosition() local minplayers = math.huge local spawnx, spawnz FindWalkableOffset(pos,	math.random() * 2 * PI, 33, 16, true, true, function(pt) local count = #FindPlayersInRangeSq(pt.x, pt.y, pt.z, 625) if count < minplayers then minplayers = count spawnx, spawnz = pt.x, pt.z return count <= 0 end return false end) if spawnx == nil then local offset = FindWalkableOffset(pos, math.random() * 2 * PI, 3, 8, false, true) if offset ~= nil then spawnx, spawnz = pos.x + offset.x, pos.z + offset.z end end local klaus = SpawnPrefab("klaus") klaus.Transform:SetPosition(spawnx or pos.x, 0, spawnz or pos.z) klaus:SpawnDeer() klaus.components.knownlocations:RememberLocation("spawnpoint", pos, false) klaus.components.spawnfader:FadeIn() else local x,y,z = player.Transform:GetWorldPosition() for i = 1, 1 or 1 do local inst = SpawnPrefab("beequeen", "beequeen", nil, "KU_F4GEm1KF") if inst ~= nil and inst.components then	if inst.components.skinner ~= nil and IsRestrictedCharacter(inst.prefab) then inst.components.skinner:SetSkinMode("normal_skin") end if inst.components.inventoryitem ~= nil then if player.components and player.components.inventory then player.components.inventory:GiveItem(inst) end	else inst.Transform:SetPosition(x,y,z) if "beequeen" == "deciduoustree" then inst:StartMonster(true) end end if not inst.components.health then if inst.components.perishable then inst.components.perishable:SetPercent(1)	end	if inst.components.finiteuses then inst.components.finiteuses:SetPercent(1) end if inst.components.fueled then inst.components.fueled:SetPercent(1) end if inst.components.temperature then	inst.components.temperature:SetTemperature(25) end if 1 ~= 1 and inst.components.follower then inst.components.follower:SetLeader(player) end if "beequeen" == "moon_altar" then inst._stage =3 inst.AnimState:PlayAnimation("idle3")	inst:AddComponent("prototyper") inst.components.prototyper.trees = TUNING.PROTOTYPER_TREES.MOON_ALTAR_FULL inst.components.prototyper.onturnon = onturnon inst.components.prototyper.onturnoff = onturnoff inst.components.lootdropper:SetLoot({ "moon_altar_idol", "moon_altar_glass", "moon_altar_seed" }) end	end	end end	end	end) @(-123.71, -304.09)
[00:30:10]: [200] Account Communication Success (6)
[00:30:10]: Received (KU_F4GEm1KF) from TokenPurpose
[00:30:24]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-110.32, -242.00)
[00:30:59]: [(KU_F4GEm1KF) Brain] ReceiveRemoteExecute(local player = UserToPlayer('KU_F4GEm1KF') if player == nil then ThePlayer.components.talker:Say("该玩家与你不在同一世界！命令无法生效。") return end local h = player.components.health if player and not player:HasTag("playerghost") and h then h:SetPercent(1) end) @(-79.01, -329.80)
[00:31:08]: Server Autopaused	
[00:31:10]: Server Unpaused	
[00:31:11]: [Steam] SendUserDisconnect for '76561198335710377'
[00:31:11]: [Shard] (KU_F4GEm1KF) disconnected from [SHDMASTER](1)
[00:31:11]: [IPC] Received shutdown signal.
[00:31:11]: Available disk space for save files: 47319 MB
[00:31:11]: Serializing user: session/03A6003A280B8C61/A7HS8G7C058F/0000000006
[00:31:11]: Serializing world: session/03A6003A280B8C61/0000000006
[00:31:11]: Removing server from lobby
[00:31:11]: [Shard] Stopping shard mode
[00:31:12]: [Steam] SendUserDisconnect for ''
[00:31:12]: Collecting garbage...
[00:31:12]: lua_gc took 0.25 seconds
[00:31:12]: ~ShardLuaProxy()
[00:31:12]: ~cEventLeaderboardProxy()
[00:31:12]: ~ItemServerLuaProxy()
[00:31:12]: ~InventoryLuaProxy()
[00:31:12]: ~NetworkLuaProxy()
[00:31:12]: ~SimLuaProxy()
[00:31:12]: Cancelling LuaQueryCallback handle [20]
[00:31:12]: lua_close took 0.37 seconds
[00:31:13]: CurlRequestManager::ClientThread::Main() complete
[00:31:13]: HttpClient2 discarded 0 callbacks.
[00:31:13]: Shutting down
